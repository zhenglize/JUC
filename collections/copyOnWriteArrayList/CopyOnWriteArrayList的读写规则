                        CopyOnWriteArrayList的读写规则

◆和读写锁类似:读读共享、其他都互斥(写写互斥、读写互斥、写读互斥)

◆读写锁规则的升级:读取是完全不用加锁的,并且更厉害的是写入也不会阻塞读取操作。只有写入和写入之间需要进行同步等待

CopyOnWriteArrayList实现原理
 当CopyOnWriteArrayList想要修改数据的时候。它不会在原来的内存上进行修改。而是将原来这个List所在的内存进行拷贝。
 在拷贝的内存区域,进行数据的写入。当结束写入的时候，再把引用指向自己。但是在这个期间想要读取数据的时候，只能在
 原来的内存区域进行读取。实现了读写分离。并且可以在迭代的时候修改数据。因为迭代过程中修改的是拷贝的内存，
 原来的内存区域是不可变的。这就是CopyOnWrite的原理

CopyOnWriteArrayList的缺点
◆数据一致性问题: CopyOnWrite容器只能保证数据的最终一致性,不能保证数据的实时一致性。所以如果你希望写入的
  数据，马上能读到,请不要使用CopyOnWrite容器。

◆内存占用问题:因为CopyOnWrite的写是复制机制,所以在进行写操作的时候,内存里会同时驻扎两个对象的内存。


















