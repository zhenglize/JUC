                            Semaphore信号量
◆Semaphore可以用来限制或管理数量有限的资源的使用情况。

◆信号量的作用是维护一个“许可证”的计数,线程可以“获取”许可证,那信号量剩余的许可证就减一, 线程也可以“释放”
  一个许可证,那信号量剩余的许可证就加一,当信号量所拥有的许可证数量为0 ,那么下一个还想要获取许可证的线程，就
   需要等待,直到有另外的线程释放了许可证

                             Semaphore信号量使用流程
1.初始化Semaphore并指定许可证的数量
2.在需要被现在的代码前加acquire()或者acquireUninterruptibly()方法
3.在任务执行结束后,调用release()来释放许可证

                             Semaphore信号量主要方法介绍
◆new Semaphore(int permits, boolean fair) : 这里可以设置是否要使用公平策略,如果传入true ,
  那么Semaphore会把之前等待的线程放到FIFO的队列里,以便于当有了新的许可证,可以分发给之前等了最长时间的线程。

◆tryAcquire() :看看现在有没有空闲的许可证,如果有的话就获取,如果没有的话也没关系,我不必陷入阻塞,我可以去做
  别的事,过一会再来查看许可证的空闲情况。

◆tryAcquire(timeout) :和tryAcquire()-样,但是多了一个超时时间,比如“在3秒内获取不到许可证,我就去做别的事”。

◆acquire()  获取许可证响应中断

◆acquireUninterruptibly()  获取许可证，不响应中断

◆release()      释放许可证

                            注意点
1。获取和释放的许可证数量必须一致,则比如每次都获取2个但是只释放1个甚至不释放,随着时间的推移,到最后许可证
   数量不够用,会导致程序卡死。(虽然信号量类并不对是否和获取的数量做规定,但是这是我们的编程规范,否则容易出错)

2.注意在初始化Semaphore的时候设置公平性, 一般设置为true会更合理

3.并不是必须由获取许可证的线程释放那个许可证,事实上，获取和释放许可证对线程并无要求,也许是A获取了,然后
   由B释放,只要逻辑合理即可。

