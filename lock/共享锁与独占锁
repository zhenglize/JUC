                           共享锁与独占锁
独占锁:指该锁一次只能被一个线程所持有。对ReentrantLock和Synchronized而言都是独占锁

共享锁:又称为读锁。指该锁可被多个线程所持有。获得共享锁之后,可以查看但无法修改和删除数据,其他线程此时
       也可以获取到共享锁,也可以查看但无法修改和删除数据
       对ReentrantReadWriteLock其读锁是共享锁，其写锁是独占锁。
       读锁的共享锁可保证并发读是非常高效的，读写，写读，写写的过程是互斥的。

读写锁的作用:
◆在没有读写锁之前,我们假设使用ReentrantLock ,那么虽然我们保证:了线程安全,但是也浪费了一定的资源.
  多个读操作同时进行,并没有线程安全问题
◆在读的地方使用读锁,在写的地方使用写锁,灵活控制,如果没有写锁的情况下,读是无阻塞的,提高了程序的执行效率

读写锁的规则:
a)多个线程只申请读锁,都可以申请到
b)如果有一个线程已经占用了读锁,则此时其他线程如果要申请写锁,则申请写锁的线程会一直等待释放读锁。
c)如果有一个线程已经占用了写锁,则此时其他线程如果申请写锁或者读锁,则申请的线程会一直等待释放写锁。
◆ 一句话总结:要么是一个或多个线程同时有读锁，要么是一个线程有写锁,但是两者不会同时出现(要么多读,要多一写)

◆换一种思路更容易理解:读写锁只是一把锁,可以通过两种方式锁定:读锁定和写锁定。读写锁可以同时被一个或多个线程读锁定,
  也可以被单一线程写锁定。但是永远不能同时对这把锁进行读锁定和写锁定。
  这里是把“获取写锁”理解为”把读写锁进行写锁定”，相当于是换了一种思路,不过原则是不变的,就是要么是一个或多个线程
  同时有读锁(同时读锁定) , 要么是一个线程有写锁(进行写锁定) , 但是两者不会同时出现。

ReentrantReadWriteLock的读写锁策略的选择:
◆策略一是使用非公平锁，当来一个线程想要读的时候,就可以插队。让写锁进行等待。直到读锁完成。这样做增加了读锁的效率
  但是容易造成写锁的饥饿。
◆策略二是读锁来了在队列中等待，按照队列的顺序，来判断读锁和写锁的执行顺序。这样就避免了写锁的饥饿，但是降低了一部分
  的效率。
  ReentrantReadWriteLock选择的是策略二

读锁的插队策略
◆公平锁：不允许插队
◆非公平锁
 写锁可以随时插队
 读锁仅在等待队列头结点不是想获取写锁的线程的时候可以插队
◆插队策略：为了防止饥饿，读锁不能插队。原因是为了避免死锁
◆升降级策略：只能降级，不能升级
◆适用场合：相比于ReentrantLock适用于一般场合ReentrantReadWriteLock 适用于读多写少的情况，合理使用可以进
 一步提高并发效率。




