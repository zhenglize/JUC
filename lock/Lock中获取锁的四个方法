                    Lock中获取锁的四种方法

◆lock()、tryLock()、tryLock(long time, TimeUnit unit)和lockInterruptibly()

lock()
◆lock()就是最普通的获取锁，如果锁已被其他线程获取,则进行等待
◆Lock不会像synchronized一样在异常时自动释放锁
◆因此最佳实践是,在finally中释放锁,以保证发生异常时锁一定被释放
◆lock()方法不能被中断,这会带来很大的隐患:一旦陷入死锁lock()就会陷入永久等待

tryLock()
◆tryLock()用来尝试获取锁,如果当前锁没有被其他线程占用，则获取成功,则返回true,否则返回false,代表获取锁失败
◆相比于lock,这样的方法显然功能更强大了,我们可以根据是否能获取到锁来决定后续程序的行为
◆该方法会立即返回,即便在拿不到锁时不会一直在那等

tryLock(long time, TimeUnit unit):
◆超时就放弃

lockInterruptibly()
◆lockInterruptibly()，相当于tryLock(long time, TimeUnit unit)把超时时间设置为无限。在等待锁的过程中,
  线程可以被中断