                          自旋锁与阻塞锁
为什么需要自旋锁?
◆阻塞或唤醒一-个Java线程需要操作系统切换CPU状态来完成,这种状态转换需要耗费处理器时间
◆如果同步代码块中的内容过于简单,状态转换消耗的时间有可能比用户代码执行的时间还要长
◆在许多场景中,同步资源的锁定时间很短,为了这一小段时间去切换线程,线程挂起和恢复现场的花费可能会让系统得不偿失

什么是自旋锁？与阻塞锁？
◆如果物理机器有多个处理器,能够让两个或以上的线程同时并行执行,我们就可以让后面那个请求锁的线程不放弃CPU的执行时
  间,看看持有锁的线程是否很快就会释放锁。而为了让当前线程“稍等一下” , 我们需让当前线程进行自旋,如果在自旋完成后
  前面锁定同步资源的线程已经释放了锁,那么当前线程就可以不必阻塞而是直接获取同步资源,从而避免切换线程的开销。这就是
  自旋锁。
◆阻塞锁和自旋锁相反,阻塞锁如果遇到没拿到锁的情况,会直接把线程阻塞,直到被唤醒

自旋锁的缺点？
◆如果锁被占用的时间很长,那么自旋的线程只会白浪费处理器资源
◆在自旋的过程中,一直消耗cpu ,所以虽然自旋锁的起始开销低于悲观锁,但是随着自旋时间的增长,开销也是线性增长的

自旋锁的原理
◆在java1.5版本及以上的并发框架java.util.concurrent的atmoic包下的类基本都是自旋锁的实现
◆AtomicInteger的实现:自旋锁的实现原理是CAS。AtomicInteger中调用unsafe进行自增操作的源码中的do-while
  循环就是一个自旋操作,如果修改过程中遇到其他线程竞争导致没修改成功,就在while里死循环,直至修改成功

自旋锁的适用场景
◆自旋锁一般用于多核的服务器，在并发度不是特别高的情况下,比阻塞锁的效率高
◆另外,自旋锁适用于临界区比较短小的情况,否则如果临界区很大(线程一旦拿到锁,很久以后才会释放) , 那也是不合适的