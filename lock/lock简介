                            Lock简介、地位和作用

◆锁是一种工具,用于控制对共享资源的访问。

◆Lock和synchronized ,这两个是最常见的锁,它们都可以达到线程安全的目的,但是在使用上和功能上又有较大的不同。

◆Lock并不是用来代替synchronized的,而是当使用synchronized不合适或不足以满足要求的时候,来提供高级功能的。

◆Lock接口最常见的实现类是ReentrantLock

◆通常情况下，Lock只允许一个线程来访问这个共享资源。 不过有的时候,一些特殊的实现也可允许并发访问,
  比如ReadWriteLock里面的ReadLock.

          synchronized和lock有什么区别?用新的lock有什么好处?你举例说说

1.原始构成
   synchronized是关键字属于JVM层面。他通过两个JVM指令，monitorEnter、monitorExit
   monitorEnter进入锁调用(底层是通过monitor对象来完成，其实wait/notify等方法也依赖于monitor对象
   只有在同步块或方法中才能调wait/notify等方法。
   monitorExit 释放锁调用
   Lock是具体类(java.util.concurrent.locks.Lock)是api层面的锁
2.使用方法
   synchronized不需要用户去手动释放锁，当synchronized代码执行完后系统会自动让线程释放对锁的占用。
   ReentrantLock则需要用户去手动释放锁若没有主动释放锁，就有可能导致出现死锁现象。
   需要lock()和unlock()方法配合try/finally语句块来完成。
3.等待是否可中断
   synchronized不可中断，除非抛出异常或者正常运行完成。
   ReentrantLock可中断。
   1.设置超时方法tryLock(Long timeout, TimeUnit unit)
   2.lockInterruptibly()放代码块中，调用interrupt()方法可中断
4.加锁是否公平
   synchronized非公平锁
   ReentrantLock两者都可以，默认非公平锁，构造方法可以传入boolean值, true为公平锁，false为非公平锁
5.锁绑定多个条件condition
   synchronized没有
   ReentrantLock用来实现分组唤醒需要唤醒的线程们,可以精确唤醒,而不是像synchronized要么随机唤醒一个线程
   要么唤醒全部线程。