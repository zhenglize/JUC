                        Adder累加器
◆是Java 8引入的,相对是比较新的一个类
◆高并发下LongAdder比AtomicLong效率高,不过本质是空间换时间
◆竞争激烈的时候, LongAdder把不同线程对应到不同的Cell上进行修改,降低了冲突的概率,是多段锁的理念,提高了并发性

LongAdder对原子类的改进和原理
◆在内部,这个LongAdder的实现原理和刚才的AtomicLong是有不同的,AtomicLong的实现原理是,每一次加法都需要做同步,
  所以在高并发的时候会导致冲突比较多,也就降低了效率
◆而此时的LongAdder ,每个线程会有自己的一个计数器, 仅用来在自己线程内计数,这样一来就不会和其他线程的计数器干扰
  假如第一个线程的计数器数值,也就是ctr'为1的时候，可能线程2的计数器ctr“的数值已经是3了,他们之间并不存在竞争关系,
  所以在加和的过程中,根本不需要同步机制,也不需要刚才的flush和refresh。这里也没有一个公共的counter来给所有线程
  统一计数
◆LongAdder引入了分段累加的概念，内部有一个base变量和一个Cell[]数组共同参与计数:
◆base变量:竞争不激烈,直接累加到该变量上
◆Cell[]数组 :竞争激烈,各个线程分散累加到自己的槽Cell[i]中

源码分析:
   public long sum() {
     Cell[] as = cells;
     Cell a;
     long sum = base;
     if (as != null) {
      for (inti= 0;i < as.length; ++i) {
         if ((a = as[j])!= null){
           sum += a.value;
            }
           }
          }
          return sum;
      }
 若cel数组是空的，则直接返回base变量的值。若cell数组不是空的，则遍历cell数组中存储的数据值，将它们加到sum变量上，
  并直接return回去
LongAdder的适用场景:
◆在低争用下, AtomicLong和LongAdder这两个类具有相似的特征。但是在竞争激烈的情况下, LongAdder的预期吞吐量要高得多,
  但要消耗更多的空间
◆LongAdder适合的场景是统计求和计数的场景,而且LongAdder基本只提供了add方法,而AtomicLong还具有cas方法