                            为什么需要AQS ?
◆锁和协作类有共同点:闸门。事实上，不仅是ReentrantLock和Semaphore ,包括CountDownLatch、
  ReentrantReadWriteLock都有这样类似的"协作”(或者叫“同步”)功能,其实,它们底层都用了一个共同的基类,
  这就是AQS。
                      生活中的例子类比AQS在线程协作类中的作用？
◆Semaphore :一个人面试完了以后,后一个人才能进来继续面试
◆CountDownLatch :群面，等待10人到齐
◆Semaphore、CountDownLatch这些同步工具类 ,要做的，就只是写下自己的“要人”规则。比如是"出一个,进一个"
  或者说“凑齐10人, 一起面试"
◆剩下的招呼面试者的脏活累活交给AQS来做
                            如果没有AQS
◆就需要每个协作工具自己实现:
        ◆同步状态的原子性管理
        ◆线程的阻塞与解除阻塞
        ◆队列的管理
◆在并发场景下，自己正确且高效实现这些内容,是相当有难度的，所以我们用AQS来帮我们把这些脏活累活都搞定,
  我们只关注业务逻辑就够了
                            AQS的作用
◆AQS是一个用于构建锁、同步器、协作工具类的工具类(框架)。有了AQS以后,更多的协作工具类都可以很方便得被写出来
◆一句话总结:有了AQS ,构建线程协作类就容易多了。


